<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!--  Title Bar Text  -->
    <Style
        x:Key="TitleBarText"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource WindowTitleForegroundBrushKey}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Margin" Value="5,8" />
    </Style>

    <!--  Form Title  -->
    <Style
        x:Key="FormTitle"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource LatoBold}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="Foreground" Value="{StaticResource FormTitleForegroundBrushKey}" />
    </Style>

    <!--  Form Subtitle  -->
    <Style
        x:Key="FormSubtitle"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{StaticResource FormSubtitleForegroundBrushKey}" />
    </Style>

    <!--  Line Separator  -->
    <Style x:Key="LineSeparator" TargetType="{x:Type Border}">
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Margin" Value="0,10,0,10" />
        <Setter Property="BorderThickness" Value="0,0,0,0.2" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0, 0" EndPoint="1, 0">
                    <GradientStop Offset="0.0" Color="{StaticResource LineSeparator0Background}" />
                    <GradientStop Offset="0.5" Color="{StaticResource LineSeparator1Background}" />
                    <GradientStop Offset="1.0" Color="{StaticResource LineSeparator0Background}" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TextBox with placeholder  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">

        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">

                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Border>

                        <!--  Placeholder  -->
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource LatoThin}"
                            Foreground="{StaticResource TextBoxPlaceholderForegroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{TemplateBinding Tag}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                        <!--  Validation exclamation mark  -->
                        <TextBlock
                            Name="exclamation"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource FontAwesomeSolid}"
                            Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                            Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter TargetName="exclamation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

    </Style>

    <!--  Checkbox Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CheckBox}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Radio Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushKey}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />
        <Setter Property="Margin" Value="5" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Slider Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ComboBox Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--  Validation exclamation mark  -->
                    <TextBlock
                        FontFamily="{StaticResource FontAwesomeSolid}"
                        Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                        IsHitTestVisible="False"
                        Text="{StaticResource FontAwesomeExclamationCircleIcon}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Color Picker  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:ColorPicker}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--  Validation exclamation mark  -->
                    <TextBlock
                        Name="exclamation"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        FontFamily="{StaticResource FontAwesomeSolid}"
                        Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                        IsHitTestVisible="False"
                        Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                        Visibility="Collapsed" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Time Span Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:TimeSpanUpDown}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Overlay Checkbox  -->
    <Style x:Key="OverlayCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="30"
                                Height="30"
                                BorderThickness="7"
                                CornerRadius="0">
                                <!--  Border - Idle  -->
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                                <GradientStop Offset="1.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>

                                <!--  Background - Idle  -->
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{StaticResource OverlayCheckboxBackground}" />
                                                <GradientStop Offset="1.0" Color="{StaticResource OverlayCheckboxBackground}" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                            </Border>
                        </BulletDecorator.Bullet>
                        <!--  Content/Text  -->
                        <ContentPresenter
                            Margin="5,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"
                            TextBlock.FontSize="14"
                            TextBlock.Foreground="{StaticResource SideMenuForegroundBrushKey}" />

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <!--  Mouse Over  -->
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxHover}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxHover}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Pressed  -->
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxAction}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxAction}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Disabled  -->
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <!--  Checked  -->
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxChecked}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxCheckedAlt}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Unchecked  -->
                                <VisualState x:Name="Unchecked" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Spinning Text  -->
    <Style
        x:Key="SpinningText"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">

        <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}" />
        <Setter Property="Text" Value="{StaticResource FontAwesomeCircleNotchIcon}" />
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Storyboard x:Key="Spin">
                <DoubleAnimation
                    RepeatBehavior="Forever"
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                    From="0"
                    To="360"
                    Duration="0:0:2" />
            </Storyboard>
        </Style.Resources>

        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsVisible}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard Name="SpinStoryboard" Storyboard="{StaticResource Spin}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="SpinStoryboard" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>

    </Style>


</ResourceDictionary>