<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:local="clr-namespace:BlackSpiritHelper"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!--  Title Bar Text  -->
    <Style
        x:Key="TitleBarText"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource WindowTitleForegroundBrushKey}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Margin" Value="5,8" />
    </Style>

    <!--  Form Title  -->
    <Style
        x:Key="FormTitle"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource LatoBold}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="Foreground" Value="{StaticResource FormTitleForegroundBrushKey}" />
    </Style>

    <!--  Form Subtitle  -->
    <Style
        x:Key="FormSubtitle"
        BasedOn="{StaticResource BaseTextBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{StaticResource FormSubtitleForegroundBrushKey}" />
    </Style>

    <!--  Line Separator  -->
    <Style x:Key="LineSeparator" TargetType="{x:Type Border}">
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Margin" Value="0,10,0,10" />
        <Setter Property="BorderThickness" Value="0,0,0,0.2" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0, 0" EndPoint="1, 0">
                    <GradientStop Offset="0.0" Color="{StaticResource LineSeparator0Background}" />
                    <GradientStop Offset="0.5" Color="{StaticResource LineSeparator1Background}" />
                    <GradientStop Offset="1.0" Color="{StaticResource LineSeparator0Background}" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TextBox Input (with placeholder)  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TextBox}">

        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">

                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Border>

                        <!--  Placeholder  -->
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource LatoLight}"
                            Foreground="{StaticResource TextBoxPlaceholderForegroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{TemplateBinding Tag}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                        <!--  Validation exclamation mark  -->
                        <TextBlock
                            x:Name="exclamation"
                            Margin="0,0,10,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource FontAwesomeSolid}"
                            Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                            Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                            <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter TargetName="exclamation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

    </Style>

    <!--  TextBox - Small (with placeholder)  -->
    <Style
        x:Key="TextBoxSmall"
        BasedOn="{StaticResource BaseStyle}"
        TargetType="{x:Type TextBox}">

        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">

                    <Grid>
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Border>

                        <!--  Placeholder  -->
                        <TextBlock
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource LatoLight}"
                            Foreground="{StaticResource TextBoxPlaceholderForegroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{TemplateBinding Tag}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                                            <Setter Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>

                        </TextBlock>

                        <!--  Validation exclamation mark  -->
                        <TextBlock
                            x:Name="exclamation"
                            Margin="0,0,5,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            FontFamily="{StaticResource FontAwesomeSolid}"
                            Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                            IsHitTestVisible="False"
                            Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                            Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                            <Setter Property="Background" Value="{StaticResource DisabledBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                            <Setter Property="Foreground" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
                            <Setter TargetName="exclamation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

    </Style>

    <!--  Checkbox Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CheckBox}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  CheckBox - Medium  -->
    <Style x:Key="CheckBoxMedium" TargetType="{x:Type CheckBox}">

        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
            </Style>
            <Style TargetType="{x:Type Grid}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </Style.Resources>
        <Style.BasedOn>
            <StaticResource ResourceKey="BaseStyle" />
        </Style.BasedOn>
    </Style>

    <!--  CheckBox - Large  -->
    <Style x:Key="CheckBoxLarge" TargetType="{x:Type CheckBox}">

        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="Width" Value="24" />
                <Setter Property="Height" Value="24" />
            </Style>
            <Style TargetType="{x:Type Grid}">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </Style.Resources>
        <Style.BasedOn>
            <StaticResource ResourceKey="BaseStyle" />
        </Style.BasedOn>
    </Style>

    <!--  Radio Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrushKey}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />
        <Setter Property="Margin" Value="5" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Slider Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ComboBox Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--  Validation exclamation mark  -->
                    <TextBlock
                        FontFamily="{StaticResource FontAwesomeSolid}"
                        Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                        IsHitTestVisible="False"
                        Text="{StaticResource FontAwesomeExclamationCircleIcon}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ComboBox Input - button style  -->
    <Style
        x:Key="ComboBoxButton"
        BasedOn="{StaticResource BaseStyle}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderThickness" Value="5" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="BorderBrush" Value="{StaticResource SideMenuForegroundDarkBrushKey}" />
        <Setter Property="Tag" Value="{StaticResource FontAwesomeCogIcon}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            Grid.ColumnSpan="2"
                            Margin="1"
                            AllowsTransparency="True"
                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Placement="Bottom"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Themes:SystemDropShadowChrome
                                x:Name="shadow"
                                MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                Color="Transparent">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                    BorderThickness="1">
                                    <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas
                                                x:Name="canvas"
                                                Width="0"
                                                Height="0"
                                                HorizontalAlignment="Left"
                                                VerticalAlignment="Top">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                    Fill="{Binding Background, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                        <ToggleButton
                            x:Name="toggleButton"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Tag="{TemplateBinding Tag}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="IsTabStop" Value="False" />
                                    <Setter Property="Focusable" Value="False" />
                                    <Setter Property="ClickMode" Value="Press" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border
                                                    x:Name="templateRoot"
                                                    Margin="0"
                                                    Padding="0"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    SnapsToDevicePixels="True">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                            <GradientStop Offset="0.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                                            <GradientStop Offset="1.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                    <Border
                                                        x:Name="splitBorder"
                                                        Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                                        Margin="0"
                                                        Padding="0"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"
                                                        BorderThickness="0"
                                                        SnapsToDevicePixels="True">
                                                        <TextBlock
                                                            x:Name="Arrow"
                                                            Margin="0"
                                                            Padding="0"
                                                            HorizontalAlignment="Center"
                                                            VerticalAlignment="Center"
                                                            FontFamily="{StaticResource FontAwesomeSolid}"
                                                            FontSize="10"
                                                            Foreground="#93979f"
                                                            Text="{TemplateBinding Tag}" />
                                                        <!--
                                                        <Path
                                                            x:Name="Arrow"
                                                            Margin="0"
                                                            HorizontalAlignment="Center"
                                                            VerticalAlignment="Center"
                                                            Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z"
                                                            Fill="#FF6060FF" />
                                                        -->
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <!--  Default  -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                                            <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                                            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FFABADB3" />
                                                        <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                                        <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                                    </MultiDataTrigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <!-- <Setter TargetName="Arrow" Property="Fill" Value="Black" /> -->
                                                        <Setter TargetName="Arrow" Property="Foreground" Value="#93979f" />
                                                    </Trigger>
                                                    <!--  Hover  -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#93979f" />
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF7EB4EA" />
                                                        <Setter TargetName="splitBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFEBF4FC" />
                                                                    <GradientStop Offset="1" Color="#FFDCECFC" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="splitBorder" Property="BorderBrush" Value="#FF7EB4EA" />
                                                    </MultiDataTrigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <!-- <Setter TargetName="Arrow" Property="Fill" Value="Black" /> -->
                                                        <Setter TargetName="Arrow" Property="Foreground" Value="#93979f" />
                                                    </Trigger>
                                                    <!--  Press/Action  -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#313239" />
                                                                    <GradientStop Offset="1" Color="#313239" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#93979f" />
                                                    </MultiDataTrigger>
                                                    <!--  IsSelected  -->
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding SelectedItem, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}, Converter={local:IsNullConverter}}" Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="Arrow" Property="Foreground" Value="#ec1e24" />
                                                        <Setter TargetName="templateRoot" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#232429" />
                                                                    <GradientStop Offset="1" Color="#232429" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FF569DE5" />
                                                        <Setter TargetName="splitBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFDAEBFC" />
                                                                    <GradientStop Offset="1" Color="#FFC4E0FC" />
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="splitBorder" Property="BorderBrush" Value="#FF569DE5" />
                                                    </MultiDataTrigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <!-- <Setter TargetName="Arrow" Property="Fill" Value="Black" /> -->
                                                        <Setter TargetName="Arrow" Property="Foreground" Value="#93979f" />
                                                    </Trigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background" Value="#FFF0F0F0" />
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FFD9D9D9" />
                                                    </MultiDataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                                            <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                                        <Setter TargetName="templateRoot" Property="BorderBrush" Value="#FFBFBFBF" />
                                                        <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                                                        <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <!--
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            IsHitTestVisible="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        -->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                            <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="shadow" Property="Color" Value="#71000000" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="Height" Value="95" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                        <Trigger SourceName="DropDownScrollViewer" Property="CanContentScroll" Value="False">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--  Validation exclamation mark  -->
                    <TextBlock
                        FontFamily="{StaticResource FontAwesomeSolid}"
                        Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                        IsHitTestVisible="False"
                        Text="{StaticResource FontAwesomeExclamationCircleIcon}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Color Picker  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:ColorPicker}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--  Validation exclamation mark  -->
                    <TextBlock
                        x:Name="exclamation"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        FontFamily="{StaticResource FontAwesomeSolid}"
                        Foreground="{StaticResource TextBoxLineErrorBackgroundBrushKey}"
                        IsHitTestVisible="False"
                        Text="{StaticResource FontAwesomeExclamationCircleIcon}"
                        Visibility="Collapsed" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Time Span Input  -->
    <Style BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type xctk:TimeSpanUpDown}">
        <Setter Property="FontFamily" Value="{StaticResource LatoLight}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineBackgroundBrushKey}" />

        <!--  Delete default error template  -->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineFocusBackgroundBrushKey}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)/ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxLineErrorBackgroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Overlay Checkbox  -->
    <Style x:Key="OverlayCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border
                                x:Name="Border"
                                Width="30"
                                Height="30"
                                BorderThickness="7"
                                CornerRadius="0">
                                <!--  Border - Idle  -->
                                <Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                                <GradientStop Offset="1.0" Color="{StaticResource OverlayCheckboxBorder}" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>

                                <!--  Background - Idle  -->
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="{StaticResource OverlayCheckboxBackground}" />
                                                <GradientStop Offset="1.0" Color="{StaticResource OverlayCheckboxBackground}" />
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>

                                </Border.Background>
                            </Border>
                        </BulletDecorator.Bullet>
                        <!--  Content/Text  -->
                        <ContentPresenter
                            Margin="5,1,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"
                            TextBlock.FontSize="14"
                            TextBlock.Foreground="{StaticResource SideMenuForegroundBrushKey}" />

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <!--  Mouse Over  -->
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxHover}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxHover}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Pressed  -->
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxAction}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxAction}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Disabled  -->
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <!--  Checked  -->
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxChecked}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverlayCheckboxCheckedAlt}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <!--  Unchecked  -->
                                <VisualState x:Name="Unchecked" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Spinning Text  -->
    <Style x:Key="SpinningText" TargetType="{x:Type TextBlock}">

        <Style.Resources>
            <Storyboard x:Key="Spin">
                <DoubleAnimation
                    RepeatBehavior="Forever"
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                    From="0"
                    To="360"
                    Duration="0:0:2" />
            </Storyboard>
        </Style.Resources>

        <Setter Property="FontFamily" Value="{StaticResource FontAwesomeSolid}" />
        <Setter Property="Text" Value="{StaticResource FontAwesomeCircleNotchIcon}" />
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform />
            </Setter.Value>
        </Setter>

        <Style.BasedOn>
            <StaticResource ResourceKey="BaseTextBlockStyle" />
        </Style.BasedOn>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsVisible, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="SpinStoryboard" Storyboard="{StaticResource Spin}" />
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="SpinStoryboard" />
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>